/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Clases;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Reader;
import java.io.Writer;
import java.util.LinkedList;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import static Clases.token.*;
import java.util.logging.Level;
import java.util.logging.Logger;


/**
 *
 * @author espin
 */
public class Ventana extends javax.swing.JFrame {

    /**
     * Creates new form Ventana
     */
    public String archivoTokens="Tokens"; //Archivo con el resultado de los tokens
    List<String> tokenslist;

    public Ventana() {
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Interfaz/carry.png"))); // NOI18N
        jButton1.setText("Cargar archivos");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Bienvenido");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Seleccione el archivo que desea ejecutar:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(113, 113, 113)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(183, 183, 183)
                        .addComponent(jButton1)))
                .addContainerGap(126, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 90, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(85, 85, 85))
        );

        jButton1.getAccessibleContext().setAccessibleName("Cargar archivo");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:       
        JFileChooser fileChooser = new JFileChooser();
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            archivoTokens+=fileChooser.getSelectedFile().getName();
            try {
                probarLexerFile(fileChooser.getSelectedFile().getAbsolutePath());
            } catch (IOException ex) {
                Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
            }
            System.out.println("SIII " + archivoTokens);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ventana().setVisible(true);
            }
        });
    }


    public void probarLexerFile(String path) throws IOException{
        int contIDs=0;
        tokenslist = new LinkedList<String>();
        Reader reader = new BufferedReader(new FileReader(path));
        lexico lexer = new lexico (reader);
        String resultado="";
        Writer output;
        int esc=0;
        boolean errores=false;
        while (true){
            token token =lexer.yylex();
            if (token == null){
                //System.out.println("REST 1 "+resultado);
                if(errores){
                    if(esc!=0){                        
                        output = new BufferedWriter(new FileWriter(archivoTokens,true));
                    }
                    else{  
                        output = new BufferedWriter(new FileWriter(archivoTokens));          
                    }
                    output.append("Se presentan errores en el analisis lexico\r\n");
                    output.close();        
                    esc++;
                }
                else{
                    if(esc!=0){                        
                        output = new BufferedWriter(new FileWriter(archivoTokens,true));
                    }
                    else{  
                        output = new BufferedWriter(new FileWriter(archivoTokens));          
                    }
                    output.append("No se presentan errores en el analisis lexico\r\n");
                    output.close();        
                    esc++;
                }
                return;
            }
            switch (token){                
                case SUMA:
                    if(esc!=0){
                        output = new BufferedWriter(new FileWriter(archivoTokens,true));
                    }
                    else{
                        output = new BufferedWriter(new FileWriter(archivoTokens));
                    }
                    output.append("+\r\n");
                    output.close();                  
                    esc++;
                    resultado=resultado+ "+\n";
                    break;
                case RESTA:
                    if(esc!=0){                        
                        output = new BufferedWriter(new FileWriter(archivoTokens,true));
                    }
                    else{
                        output = new BufferedWriter(new FileWriter(archivoTokens));
                    }
                    output.append("-\r\n");
                    output.close();                   
                    esc++;
                    resultado=resultado+ "-\n";
                    break;
                case MULT:
                    if(esc!=0){                   
                        output = new BufferedWriter(new FileWriter(archivoTokens,true));     
                    }                 
                    else{                 
                        output = new BufferedWriter(new FileWriter(archivoTokens));      
                    }
                    output.append("*\r\n");
                    output.close();                   
                    esc++;
                    resultado=resultado+ "*\n";
                    break;
                case DIV:
                    if(esc!=0){                 
                        output = new BufferedWriter(new FileWriter(archivoTokens,true));   
                    }               
                    else{               
                        output = new BufferedWriter(new FileWriter(archivoTokens));         
                    }
                    output.append("/\r\n");
                    output.close();               
                    esc++;
                    resultado=resultado+ "/\n";
                    break;
                case IGUAL:
                    if(esc!=0){                 
                        output = new BufferedWriter(new FileWriter(archivoTokens,true));   
                    }               
                    else{               
                        output = new BufferedWriter(new FileWriter(archivoTokens));         
                    }
                    output.append("==\r\n");
                    output.close();               
                    esc++;
                    resultado=resultado+ "==\n";
                    break;
                case FLOAT:
                    if(esc!=0){                 
                        output = new BufferedWriter(new FileWriter(archivoTokens,true));   
                    }               
                    else{               
                        output = new BufferedWriter(new FileWriter(archivoTokens));         
                    }
                    output.append("float\r\n");
                    output.close();               
                    esc++;
                    resultado=resultado+ "float\n";
                    break;
                case ASSIGN:
                    if(esc!=0){               
                        output = new BufferedWriter(new FileWriter(archivoTokens,true));     
                    }                
                    else{                 
                        output = new BufferedWriter(new FileWriter(archivoTokens));        
                    }
                    output.append("=\r\n");
                    output.close();                  
                    esc++;
                    resultado=resultado+ "=\n";
                    break;
                /*case ERROR:
                    if(esc!=0){      
                        output = new BufferedWriter(new FileWriter(archivoTokens,true));   
                    }                
                    else{       
                        output = new BufferedWriter(new FileWriter(archivoTokens));          
                    }
                    output.append("Error, simbolo no reconocido -> "+lexer.lexeme+"\r\n");
                    output.close();                 
                    esc++;
                    resultado=resultado+ "Error, simbolo no reconocido -> "+lexer.lexeme+"\n";
                    break;*/
                case PAREN1:
                    if(esc!=0){     
                        output = new BufferedWriter(new FileWriter(archivoTokens,true));  
                    }      
                    else{     
                        output = new BufferedWriter(new FileWriter(archivoTokens));   
                    }
                    output.append("(\r\n");
                    output.close();                  
                    esc++;
                    resultado=resultado+ "(\n";
                    break;
                case PAREN2:
                    if(esc!=0){            
                        output = new BufferedWriter(new FileWriter(archivoTokens,true)); 
                    }                   
                    else{              
                        output = new BufferedWriter(new FileWriter(archivoTokens));  
                    }
                    output.append(")\r\n");
                    output.close();               
                    esc++;
                    resultado=resultado+ ")\n";
                    break;
                case LLAVE1:
                    if(esc!=0){  
                        output = new BufferedWriter(new FileWriter(archivoTokens,true));  
                    }             
                    else{        
                        output = new BufferedWriter(new FileWriter(archivoTokens));  
                    }
                    output.append("{\r\n");
                    output.close();               
                    esc++;
                    resultado=resultado+ "{\n";
                    break;
                case LLAVE2:
                    if(esc!=0){   
                        output = new BufferedWriter(new FileWriter(archivoTokens,true));   
                    }            
                    else{       
                        output = new BufferedWriter(new FileWriter(archivoTokens));   
                    }
                    output.append("}\r\n");
                    output.close();               
                    esc++;
                    resultado=resultado+ "}\n";
                    break;
                case COMA:
                    if(esc!=0){  
                        output = new BufferedWriter(new FileWriter(archivoTokens,true));            
                    }                
                    else{          
                        output = new BufferedWriter(new FileWriter(archivoTokens));        
                    }
                    output.append(",\r\n");
                    output.close();                  
                    esc++;
                    resultado=resultado+ ",\n";
                    break;
                case DISYUNCION:
                    if(esc!=0){               
                        output = new BufferedWriter(new FileWriter(archivoTokens,true));         
                    }                    else{       
                        output = new BufferedWriter(new FileWriter(archivoTokens));         
                    }
                    output.append("#\r\n");
                    output.close();                  
                    esc++;
                    resultado=resultado+ "#\n";
                    break;
                case END:                    
                    if(esc!=0){                       
                        output = new BufferedWriter(new FileWriter(archivoTokens,true));            
                    }    
                    else{                        output = new BufferedWriter(new FileWriter(archivoTokens));  
                    }
                    output.append("$\r\n");
                    output.close();                   
                    esc++;
                    resultado=resultado+ "$\n";
                    break;
                case STRING:
                    if(esc!=0){     
                        output = new BufferedWriter(new FileWriter(archivoTokens,true));  
                    }              
                    else{                     
                        output = new BufferedWriter(new FileWriter(archivoTokens));  
                    }
                    output.append("String\r\n");
                    output.close();       
                    esc++;
                    resultado=resultado+ "String\n";
                    break;
                case CHAR:
                    if(esc!=0){              
                        output = new BufferedWriter(new FileWriter(archivoTokens,true));       
                    }             
                    else{             
                        output = new BufferedWriter(new FileWriter(archivoTokens)); 
                    }
                    output.append("char\r\n");
                    output.close();             
                    esc++;
                    resultado=resultado+ "char\n";
                    break;
                case BOOL:
                    if(esc!=0){              
                        output = new BufferedWriter(new FileWriter(archivoTokens,true));       
                    }                
                    else{           
                        output = new BufferedWriter(new FileWriter(archivoTokens));  
                    }
                    output.append("bool\r\n");
                    output.close();               
                    esc++;
                    resultado=resultado+ "bool\n";
                    break;
                case NUM:
                    if(esc!=0){         
                        output = new BufferedWriter(new FileWriter(archivoTokens,true)); 
                    }              
                    else{               
                        output = new BufferedWriter(new FileWriter(archivoTokens)); 
                    }
                    output.append("\\d\r\n");
                    output.close();                
                    esc++;
                    resultado=resultado+ "\\d\n";
                    break;
                case DECIMAL:
                    if(esc!=0){         
                        output = new BufferedWriter(new FileWriter(archivoTokens,true)); 
                    }              
                    else{               
                        output = new BufferedWriter(new FileWriter(archivoTokens)); 
                    }
                    output.append("\\f\r\n");
                    output.close();                
                    esc++;
                    resultado=resultado+ "\\f\n";
                    break;
                case POTENCIA:
                    if(esc!=0){       
                        output = new BufferedWriter(new FileWriter(archivoTokens,true));       
                    }               
                    else{ 
                        output = new BufferedWriter(new FileWriter(archivoTokens));    
                    }
                    output.append("**\r\n");
                    output.close();                
                    esc++;
                    resultado=resultado+ "**\n";
                    break;
                case TRUE:
                    if(esc!=0){           
                        output = new BufferedWriter(new FileWriter(archivoTokens,true));    
                    }              
                    else{                      
                        output = new BufferedWriter(new FileWriter(archivoTokens));
                    }
                    output.append("true\r\n");
                    output.close();                
                    esc++;
                    resultado=resultado+ "true\n";
                    break;
                case FALSE:
                    if(esc!=0){           
                        output = new BufferedWriter(new FileWriter(archivoTokens,true));    
                    }              
                    else{                      
                        output = new BufferedWriter(new FileWriter(archivoTokens));
                    }
                    output.append("false\r\n");
                    output.close();                
                    esc++;
                    resultado=resultado+ "false\n";
                    break;
                case MODULO:
                    if(esc!=0){        
                        output = new BufferedWriter(new FileWriter(archivoTokens,true));  
                    
                    }             
                    else{          
                        output = new BufferedWriter(new FileWriter(archivoTokens));  
                    }
                    output.append("~\r\n");
                    output.close();                
                    esc++;
                    resultado=resultado+ "~\n";
                    break;
                case LISTE:
                    if(esc!=0){                    
                        output = new BufferedWriter(new FileWriter(archivoTokens,true));  
                    }                
                    else{      
                        output = new BufferedWriter(new FileWriter(archivoTokens));     
                    }
                    output.append("arregloEstatico\r\n");
                    output.close();                  
                    esc++;
                    resultado=resultado+ "arregloEstatico\n";
                    break;
                case AUMENTAR:
                    if(esc!=0){                   
                        output = new BufferedWriter(new FileWriter(archivoTokens,true));   
                    }                 
                    else{                    
                        output = new BufferedWriter(new FileWriter(archivoTokens));  
                    }
                    output.append("++\r\n");
                    output.close();               
                    esc++;
                    resultado=resultado+ "++\n";
                    break;
                case DISMINUIR:
                    if(esc!=0){                 
                        output = new BufferedWriter(new FileWriter(archivoTokens,true));      
                    }          
                    else{        
                        output = new BufferedWriter(new FileWriter(archivoTokens));   
                    }
                    output.append("--\r\n");
                    output.close();                 
                    esc++;
                    resultado=resultado+ "--\n";
                    break;
                case MENOR:
                    if(esc!=0){       
                        output = new BufferedWriter(new FileWriter(archivoTokens,true));  
                    }                
                    else{                 
                        output = new BufferedWriter(new FileWriter(archivoTokens));   
                    }
                    output.append("<\r\n");
                    output.close();                  
                    esc++;
                    resultado=resultado+ "<\n";
                    break;
                case MENORIGUAL:
                    if(esc!=0){             
                        output = new BufferedWriter(new FileWriter(archivoTokens,true));  
                    }             
                    else{                  
                        output = new BufferedWriter(new FileWriter(archivoTokens));   
                    }
                    output.append("<=\r\n");
                    output.close();                  
                    esc++;
                    resultado=resultado+ "<=\n";
                    break;
                case MAYOR:
                    if(esc!=0){    
                        output = new BufferedWriter(new FileWriter(archivoTokens,true));  
                    }              
                    else{                
                        output = new BufferedWriter(new FileWriter(archivoTokens)); 
                    }
                    output.append(">\r\n");
                    output.close();                  
                    esc++;
                    resultado=resultado+ ">\n";
                    break;
                case MAYORIGUAL:
                    if(esc!=0){  
                        output = new BufferedWriter(new FileWriter(archivoTokens,true));    
                    }           
                    else{              
                        output = new BufferedWriter(new FileWriter(archivoTokens));             
                    }
                    output.append(">=\r\n");
                    output.close();                 
                    esc++;
                    resultado=resultado+ ">=\r\n";
                    break;
                case DIFERENTE:
                    if(esc!=0){      
                        output = new BufferedWriter(new FileWriter(archivoTokens,true));   
                    }             
                    else{          
                        output = new BufferedWriter(new FileWriter(archivoTokens));           
                    }
                    output.append("!=\r\n");
                    output.close();                 
                    esc++;
                    resultado=resultado+ "!=\n";
                    break;
                case CONJUCION:
                    if(esc!=0){     
                        output = new BufferedWriter(new FileWriter(archivoTokens,true));   
                    }                
                    else{            
                        output = new BufferedWriter(new FileWriter(archivoTokens));  
                    }
                    output.append("^\r\n");
                    output.close();                 
                    esc++;
                    resultado=resultado+ "^\n";
                    break;
                case INPUT:
                    if(esc!=0){      
                        output = new BufferedWriter(new FileWriter(archivoTokens,true));   
                    }                  
                    else{                    
                        output = new BufferedWriter(new FileWriter(archivoTokens)); 
                    }
                    output.append("input\r\n");
                    output.close();                
                    esc++;
                    resultado=resultado+ "input\n";
                    break;
                case NEGACION:
                    if(esc!=0){     
                        output = new BufferedWriter(new FileWriter(archivoTokens,true));  
                    }            
                    else{           
                        output = new BufferedWriter(new FileWriter(archivoTokens)); 
                    }
                    output.append("!\r\n");
                    output.close();                
                    esc++;
                    resultado=resultado+ "!\n";
                    break;
                case IF:
                    if(esc!=0){            
                        output = new BufferedWriter(new FileWriter(archivoTokens,true));   
                    }             
                    else{                
                        output = new BufferedWriter(new FileWriter(archivoTokens));
                    }
                    output.append("if\r\n");
                    output.close();                  
                    esc++;
                    resultado=resultado+ "if\n";
                    break;
                case ELSE:
                    if(esc!=0){     
                        output = new BufferedWriter(new FileWriter(archivoTokens,true));  
                    }               
                    else{           
                        output = new BufferedWriter(new FileWriter(archivoTokens));  
                    }
                    output.append("else\r\n");
                    output.close();                
                    esc++;
                    resultado=resultado+ "else\n";
                    break;
                case FOR:
                    if(esc!=0){ 
                        output = new BufferedWriter(new FileWriter(archivoTokens,true));  
                    }             
                    else{                  
                        output = new BufferedWriter(new FileWriter(archivoTokens)); 
                    }
                    output.append("for\r\n");
                    output.close();                
                    esc++;
                    resultado=resultado+ "for\n";
                    break;
                case DOWHILE:
                    if(esc!=0){   
                        output = new BufferedWriter(new FileWriter(archivoTokens,true));   
                    }              
                    else{              
                        output = new BufferedWriter(new FileWriter(archivoTokens));
                    }
                    output.append("do while\r\n");
                    output.close();               
                    esc++;
                    resultado=resultado+ "do while\n";
                    break;
                case ELIF:
                    if(esc!=0){   
                        output = new BufferedWriter(new FileWriter(archivoTokens,true));   
                    }              
                    else{              
                        output = new BufferedWriter(new FileWriter(archivoTokens));
                    }
                    output.append("elif\r\n");
                    output.close();               
                    esc++;
                    resultado=resultado+ "elif\n";
                    break;
                case PROGRAMA:
                    if(esc!=0){       
                        output = new BufferedWriter(new FileWriter(archivoTokens,true)); 
                    }                
                    else{              
                        output = new BufferedWriter(new FileWriter(archivoTokens)); 
                    }
                    output.append("programa\r\n");
                    output.close();                
                    esc++;
                    resultado=resultado+ "programa\n";
                    break;
                case MAIN:
                    if(esc!=0){       
                        output = new BufferedWriter(new FileWriter(archivoTokens,true)); 
                    }                
                    else{              
                        output = new BufferedWriter(new FileWriter(archivoTokens)); 
                    }
                    output.append("main\r\n");
                    output.close();                
                    esc++;
                    resultado=resultado+ "main\n";
                    break;
                case PRINT:
                    if(esc!=0){      
                        output = new BufferedWriter(new FileWriter(archivoTokens,true));       
                    }                 
                    else{              
                        output = new BufferedWriter(new FileWriter(archivoTokens));            
                    }
                    output.append("print\r\n");
                    output.close();                 
                    esc++;
                    resultado=resultado+ "print\n";
                    break;
                case CUADRO1:
                    if(esc!=0){        
                        output = new BufferedWriter(new FileWriter(archivoTokens,true));  
                    }                 
                    else{  
                        output = new BufferedWriter(new FileWriter(archivoTokens));   
                    }
                    output.append("[\r\n");
                    output.close();                 
                    esc++;
                    resultado=resultado+ "[\n";
                    break;
                case CUADRO2:
                    if(esc!=0){   
                        output = new BufferedWriter(new FileWriter(archivoTokens,true));  
                    }     
                    else{     
                        output = new BufferedWriter(new FileWriter(archivoTokens)); 
                    }
                    output.append("]\r\n");
                    output.close();                 
                    esc++;
                    resultado=resultado+ "]\n";
                    break;
                case ENTER:
                    if(esc!=0){       
                        output = new BufferedWriter(new FileWriter(archivoTokens,true));    
                    }               
                    else{     
                        output = new BufferedWriter(new FileWriter(archivoTokens));  
                    }
                    output.append("\\n\r\n");
                    output.close();                 
                    esc++;
                    resultado=resultado+ "\\n\n";
                    break;
                case ESPACIO:
                    if(esc!=0){         
                        output = new BufferedWriter(new FileWriter(archivoTokens,true)); 
                    }                
                    else{       
                        output = new BufferedWriter(new FileWriter(archivoTokens));   
                    }
                    output.append("\\s\r\n");
                    output.close();                 
                    esc++;
                    resultado=resultado+ "\\s\n";
                    break;
                case ID: {
                    if(!tokenslist.contains(lexer.lexeme)){
                        contIDs++;
                        tokenslist.add(lexer.lexeme);                        
                        if(esc!=0){       
                            output = new BufferedWriter(new FileWriter(archivoTokens,true));        
                        }  
                        else{      
                            output = new BufferedWriter(new FileWriter(archivoTokens));    
                        }
                        output.append(lexer.lexeme + " -> [ID,"+ contIDs + "]\r\n");
                        output.close();         
                        esc++;
                        resultado=resultado + lexer.lexeme + " -> [ID,"+ contIDs + "]\n";
                        break;
                    }
                    else{
                        if(esc!=0){ 
                            output = new BufferedWriter(new FileWriter(archivoTokens,true));      
                        }              
                        else{                    
                            output = new BufferedWriter(new FileWriter(archivoTokens)); 
                        }
                        output.append("[ID,"+ (tokenslist.indexOf(lexer.lexeme)+1)+ "]\r\n");
                        output.close();                
                        esc++;
                        resultado=resultado+ "[ID,"+ (tokenslist.indexOf(lexer.lexeme)+1)+ "]\n";
                        break;
                    }
                }
                case INT:
                    if(esc!=0){                     
                        output = new BufferedWriter(new FileWriter(archivoTokens,true));    
                    }        
                    else{           
                        output = new BufferedWriter(new FileWriter(archivoTokens));         
                    }
                    output.append(lexer.lexeme+"\r\n");
                    output.close();                
                    esc++;
                    resultado=resultado+lexer.lexeme + "\n";
                    break;
                default:
                    if(esc!=0){    
                        output = new BufferedWriter(new FileWriter(archivoTokens,true)); 
                    }             
                    else{                    
                        output = new BufferedWriter(new FileWriter(archivoTokens));  
                    }
                    output.append(lexer.lexeme+"\r\n");
                    output.close();                 
                    esc++;
                    resultado=resultado+lexer.lexeme + "\n";
            }
        }
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables
}
